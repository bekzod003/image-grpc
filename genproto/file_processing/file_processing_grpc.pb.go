// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.11.2
// source: file_processing.proto

package file_processing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileProcessingClient is the client API for FileProcessing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileProcessingClient interface {
	Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*File, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*File, error)
}

type fileProcessingClient struct {
	cc grpc.ClientConnInterface
}

func NewFileProcessingClient(cc grpc.ClientConnInterface) FileProcessingClient {
	return &fileProcessingClient{cc}
}

func (c *fileProcessingClient) Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/file_processing.FileProcessing/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileProcessingClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/file_processing.FileProcessing/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileProcessingClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/file_processing.FileProcessing/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileProcessingServer is the server API for FileProcessing service.
// All implementations must embed UnimplementedFileProcessingServer
// for forward compatibility
type FileProcessingServer interface {
	Store(context.Context, *StoreRequest) (*File, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	Download(context.Context, *DownloadRequest) (*File, error)
	mustEmbedUnimplementedFileProcessingServer()
}

// UnimplementedFileProcessingServer must be embedded to have forward compatible implementations.
type UnimplementedFileProcessingServer struct {
}

func (UnimplementedFileProcessingServer) Store(context.Context, *StoreRequest) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedFileProcessingServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedFileProcessingServer) Download(context.Context, *DownloadRequest) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedFileProcessingServer) mustEmbedUnimplementedFileProcessingServer() {}

// UnsafeFileProcessingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileProcessingServer will
// result in compilation errors.
type UnsafeFileProcessingServer interface {
	mustEmbedUnimplementedFileProcessingServer()
}

func RegisterFileProcessingServer(s grpc.ServiceRegistrar, srv FileProcessingServer) {
	s.RegisterService(&FileProcessing_ServiceDesc, srv)
}

func _FileProcessing_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_processing.FileProcessing/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServer).Store(ctx, req.(*StoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileProcessing_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_processing.FileProcessing/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileProcessing_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_processing.FileProcessing/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServer).Download(ctx, req.(*DownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileProcessing_ServiceDesc is the grpc.ServiceDesc for FileProcessing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileProcessing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file_processing.FileProcessing",
	HandlerType: (*FileProcessingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Store",
			Handler:    _FileProcessing_Store_Handler,
		},
		{
			MethodName: "List",
			Handler:    _FileProcessing_List_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _FileProcessing_Download_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file_processing.proto",
}
